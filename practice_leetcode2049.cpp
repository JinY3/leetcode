#include <bits/stdc++.h>
using namespace std;

int maxScore = 0;
int number = 0;
int n;
vector<vector<int>> children;

int dfs(int parent)
{
    int score = 1;
    int size = n - 1;

    for (int item : children[parent])
    {
        // 深度优先遍历
        int t = dfs(item);
        score *= t;
        size -= t;
    }
    if (parent != 0)
    {
        score *= size;
    }
    if (score == maxScore)
    {
        number++;
    }
    else if (score > maxScore)
    {
        maxScore = score;
        number = 1;
    }
    // 返回子树的节点个数
    return n - size;
}

int main()
{
    vector<int> parents{-1,1052,285,715,973,720,711,1009,343,257,468,399,1105,35,804,1112,368,1142,577,611,421,436,894,1015,631,295,1053,602,215,474,91,1236,438,913,1079,498,276,911,309,27,1024,331,942,549,627,1054,1191,16,173,79,179,1395,838,591,22,904,581,18,963,503,553,352,227,572,685,620,1246,792,900,930,704,502,1174,361,7,221,1316,211,70,1376,237,911,417,996,340,965,733,634,1327,363,1342,584,661,647,818,743,210,208,812,413,765,952,918,91,1107,11,819,736,1331,1254,1098,768,162,1379,897,273,17,1237,238,673,1069,680,124,1320,680,332,692,1271,641,1172,666,539,691,850,428,469,873,1205,695,551,193,1189,1121,1346,1037,1057,570,483,182,128,1075,1214,1383,1290,272,153,662,256,50,552,564,612,165,1337,537,55,416,1361,544,258,385,871,279,69,1235,471,79,590,440,1073,745,694,853,531,350,852,226,256,749,76,1099,504,198,367,18,354,263,387,522,1176,100,1111,771,1103,1304,904,49,986,931,1160,181,1053,400,396,521,595,105,192,959,1165,148,816,205,1106,233,762,526,1189,1187,1144,753,1144,947,1007,313,996,579,1310,197,1181,829,1246,148,598,4,908,380,1400,401,414,1073,906,139,748,243,1051,650,609,357,190,938,427,309,82,843,605,772,1310,138,2,472,1266,232,355,271,1083,1292,1302,118,266,1016,555,311,277,912,453,1347,500,1135,1097,939,588,132,1211,648,403,760,1284,570,564,689,767,120,509,290,423,156,1236,437,929,1003,928,1225,41,722,719,742,507,416,820,392,124,924,467,244,235,657,628,1159,17,613,795,704,453,130,81,896,850,316,546,238,243,5,724,77,1161,899,195,41,174,239,1345,673,392,1372,1323,1335,1111,1273,638,1171,700,1124,78,1007,698,986,621,439,1287,132,651,740,1008,647,121,1307,179,155,435,661,13,497,1066,941,1359,0,201,1179,494,287,1020,637,634,517,820,43,946,1243,837,643,582,40,280,114,407,581,180,616,432,1022,1119,559,306,584,10,656,35,927,1280,1114,426,688,822,1224,488,1283,485,1117,979,425,940,1230,492,1267,786,639,848,327,142,1368,1397,720,919,464,897,1286,1353,738,628,559,972,1347,1344,86,1252,707,930,954,161,1391,68,384,597,411,1122,1234,498,783,1343,369,862,585,1245,612,626,788,288,163,1385,797,187,1085,1326,994,356,1109,287,994,662,940,526,965,795,783,1089,1392,1139,506,161,336,58,303,20,321,1060,220,474,800,1219,1032,639,1161,813,433,95,45,200,730,347,693,1041,1186,545,1179,107,794,785,261,155,997,804,550,1268,982,451,302,107,864,1169,751,885,162,1374,1150,293,125,910,45,386,567,3,1288,692,1070,1227,1324,87,413,773,380,26,1103,1094,981,296,323,274,917,1248,1377,330,1301,426,1337,972,36,89,310,1186,684,346,1372,1355,1373,822,1065,1106,977,988,859,1081,1158,803,1248,903,675,1325,1199,1275,1354,178,375,573,391,1138,1168,1378,877,816,669,563,183,465,583,1364,800,1200,1132,1405,1100,827,870,541,842,36,747,357,478,1339,366,1303,1145,560,89,1242,888,1219,1038,1054,125,478,1239,801,563,877,445,516,92,1198,158,786,914,225,211,228,1366,141,508,1019,950,1259,799,1188,412,97,603,975,790,975,1267,313,469,886,25,817,732,371,1146,352,417,1202,1271,640,1362,371,1303,525,1389,202,939,829,929,731,359,756,1384,122,1272,668,587,1268,819,500,1339,840,1405,13,1313,111,117,886,221,1134,999,876,1239,770,1131,1406,1125,1125,1028,682,650,835,404,1206,1270,274,980,1338,1259,1223,320,1118,441,1270,275,63,435,569,53,199,766,1059,206,1360,1317,468,38,747,30,431,969,1307,294,344,265,990,223,169,242,557,1079,784,700,1263,802,1222,769,280,449,684,547,1011,455,1122,1077,1231,1294,1350,844,1356,791,68,1058,952,295,811,1193,932,198,7,1187,731,201,1238,857,499,1237,251,989,441,1193,128,275,1256,516,1128,231,233,879,915,515,332,813,388,912,383,953,321,781,479,674,1018,738,208,1269,286,348,1381,654,1294,1155,134,430,245,568,1213,987,1036,855,1049,1120,1336,1212,1375,642,1182,1311,541,293,520,1178,1404,1002,443,1366,19,532,916,1211,74,1012,104,615,803,995,78,716,1132,714,858,1343,261,271,931,480,1238,109,320,1240,1003,495,587,616,665,176,1147,1153,457,217,1287,239,495,659,1397,374,1033,1041,423,60,1091,602,515,971,1321,1335,1328,1291,228,1285,1112,56,733,1243,1066,1049,1056,229,728,1235,1113,935,462,876,185,465,153,1090,794,1166,323,1157,637,857,1377,485,781,896,473,57,83,32,598,677,1223,573,1285,77,1311,891,1190,173,1228,301,401,1316,344,160,715,1399,1055,10,1325,229,729,459,445,374,1056,853,330,705,1089,1046,1340,399,1008,862,710,1320,995,1369,536,522,158,699,1164,127,32,218,898,1280,531,171,1025,415,466,518,322,1162,987,250,579,100,949,666,932,1382,220,1093,1180,14,520,871,1136,480,219,851,682,301,906,1356,893,196,1153,334,670,1281,1126,175,336,519,1214,1241,110,969,1362,967,1344,679,1077,1393,58,1308,289,572,1131,1110,467,1245,1400,810,264,670,1078,1142,851,1260,328,207,1104,1224,242,879,774,1252,1123,113,944,472,356,732,257,863,92,928,659,1406,1256,177,917,948,270,716,1045,193,1094,660,50,849,1029,388,339,524,1026,1121,66,282,1032,811,176,1147,1265,57,806,743,375,1195,1260,1064,1220,1128,1355,1250,737,247,810,1292,499,126,22,690,693,701,410,744,171,1321,75,852,644,902,1230,764,839,1043,1163,528,317,827,464,1020,507,146,282,646,890,638,48,190,354,1139,272,961,1013,974,903,290,771,1090,1023,142,1234,1083,888,815,1123,1276,899,574,998,894,1172,327,85,1080,1322,492,368,1176,791,1,436,765,611,798,646,159,364,652,597,991,608,67,769,521,457,182,151,1374,418,204,463,843,1175,1005,466,1368,711,727,964,1046,223,574,1358,821,891,38,1274,1286,603,1183,797,671,49,90,948,1078,487,849,991,1276,363,796,737,346,288,70,571,538,219,686,75,1033,814,524,1162,750,678,653,15,1391,523,283,1104,1278,199,1038,768,404,1376,424,1302,974,1301,629,817,848,1360,1166,553,34,1185,1393,989,1290,909,1288,780,905,1361,609,626,387,126,1043,419,165,214,0,624,432,486,297,237,329,594,910,924,403,707,296,744,967,577,950,21,1380,915,909,696,27,197,1016,383,1373,97,933,277,1120,1196,494,386,568,698,56,119,751,1336,1175,660,757,54,431,582,583,1291,949,1115,1060,1074,283,1396,772,1322,1232,377,251,1050,1319,231,1086,188,550,475,938,947,1222,364,840,254,513,101,183,812,918,567,90,83,264,1165,790,734,690,1258,215,636,163,67,1058,1206,400,1389,966,240,1169,1181,21,477,842,636,55,76,919,792,1205,379,651,1313,750,95,54,1209,1283};
    n = parents.size();
    children = vector<vector<int>>(n);

    // 生成孩子表
    for (int i = 0; i < parents.size(); i++)
    {
        if (parents[i] != -1)
        {
            children[parents[i]].emplace_back(i);
        }
    }
    dfs(0);
    cout << number << endl;
    return 0;
}